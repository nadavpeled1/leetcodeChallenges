/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        //we will use bfs approach to calc every level, until we reach all leaves.
        //we will do so using stack: each time, we calc the average of current nodes in q, and push all their children to the next calc(q)

        List<Double> res = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root==null) return res;

        q.add(root);

        while(!q.isEmpty()){
            //iterate the q, sum, calc avg.
            int n = q.size();
            double sum = 0.0;
            for(int i = 0; i < n; i++) {
                q.poll();  //remove the head of the q
                sum += root.val;
                if(root.left!=null) q.add(root.left);
                if(root.right!=null) q.add(root.right);
            }
            res.add(sum/n);
        }
        return res;
    }
}