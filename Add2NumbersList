/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode res = new ListNode(0);
        ListNode curr = new ListNode();
        res.next = curr;
        int extra = 0;
        int calc = 0;

        while(l1 != null && l2 != null){
            calc = (l1.val + l2.val + extra);
            curr.val = calc % 10;
            extra = calc/10;
    
            l1 = l1.next;
            l2 = l2.next;

            if (l1 != null || l2 != null || extra != 0){ //there will be another dig?
                curr.next = new ListNode(); //init the next node and advance
                curr = curr.next;
            }
        }
        while(l1 != null){
            calc = (l1.val + extra);
            curr.val = calc % 10;
            extra = calc/10;
    
            l1 = l1.next;
            if (l1 != null || extra != 0){ //there will be another dig?
                curr.next = new ListNode(); //init the next node and advance
                curr = curr.next;
            }
        }

        while(l2 != null){
            calc = (l2.val + extra);
            curr.val = calc % 10;
            extra = calc/10;
    
            l2 = l2.next;
            if (l2 != null || extra != 0){ //there will be another dig?
                curr.next = new ListNode(); //init the next node and advance
                curr = curr.next;
            }
        }

        if (extra != 0) curr.val = extra;

        return res.next;
    }
}