class Solution {
    public boolean isValidSudoku(char[][] board) {
        // there are 9 rows / cols / sqs
        // each time, reset the set and check validity
        for (int i = 0; i < 9; i++) {
            HashSet<Character> rows = new HashSet<Character>();
            HashSet<Character> cols = new HashSet<Character>();
            HashSet<Character> cube = new HashSet<Character>();
            // for rows, we cant have the same number twice in the same row.
            for (int j = 0; j < 9; j++) {
                // if not in the set, add. if in the set, return false.
                if (board[i][j] != '.' && rows.contains(board[i][j])) {// if we already saw this value, return false
                    return false;
                } else {
                    rows.add(board[i][j]);
                }

                // col check:
                if (board[j][i] != '.' && cols.contains(board[j][i])) {
                    return false;
                } else {
                    cols.add(board[j][i]);
                }

                // use j to iterate the current sq, and i to choose the sq
                // i = {0..2} -> rows 0..2, cols 0..9
                // i = {3..5} -> rows 3..5 cols 0..9

                int RowIndex = 3 * (i / 3);
                int ColIndex = 3 * (i % 3);
                if (board[RowIndex + j / 3][ColIndex + j % 3] != '.'
                        && !cube.add(board[RowIndex + j / 3][ColIndex + j % 3]))
                    return false;

            }
        }
        return true;
    }

}